# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the main branch, `terraform apply` will be executed.
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: VPC Deployment
on:
  repository_dispatch:
  
jobs:
  Deploy_CCE_Cluster:
    runs-on: ubuntu-latest
    steps:
    - name: 'Checkout'
      uses: actions/checkout@master
      
    #- name: 'Terraform Format'
     # uses: hashicorp/terraform-github-actions@master
      #with:
       # tf_actions_version: 0.12.20
       # tf_actions_subcommand: 'fmt'
      #env:
        #GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 'Terraform Init'
      env:
        OS_ACCESS_KEY: ${{ secrets.FE_ACCESS_KEY_ID }}
        OS_SECRET_KEY: ${{ secrets.FE_SECRET_ACCESS_KEY }}
        OS_DOMAIN_NAME: ${{ secrets.FE_DOMAIN_NAME }}
        OS_PROJECT_NAME: ${{ secrets.FE_PROJECT_NAME }}
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'init'


    - name: 'Terraform Validate'
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: hashicorp/terraform-github-actions@master
      with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'validate'
          
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        OS_ACCESS_KEY: ${{ secrets.FE_ACCESS_KEY_ID }}
        OS_SECRET_KEY: ${{ secrets.FE_SECRET_ACCESS_KEY }}
        OS_DOMAIN_NAME: ${{ secrets.FE_DOMAIN_NAME }}
        OS_PROJECT_NAME: ${{ secrets.FE_PROJECT_NAME }}
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        
    - name: 'Terraform Apply'
      if: github.event.action == 'deploy'
      uses: hashicorp/terraform-github-actions@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        OS_ACCESS_KEY: ${{ secrets.FE_ACCESS_KEY_ID }}
        OS_SECRET_KEY: ${{ secrets.FE_SECRET_ACCESS_KEY }}
        OS_DOMAIN_NAME: ${{ secrets.FE_DOMAIN_NAME }}
        OS_PROJECT_NAME: ${{ secrets.FE_PROJECT_NAME }}
        TF_LOG: DEBUG 
        OS_DEBUG: true
      with:
        tf_actions_version: 0.12.20
        tf_actions_subcommand: 'apply'
        
    - name: 'Terraform Plan Destroy'
      if: always()
      uses: hashicorp/terraform-github-actions@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        OS_ACCESS_KEY: ${{ secrets.FE_ACCESS_KEY_ID }}
        OS_SECRET_KEY: ${{ secrets.FE_SECRET_ACCESS_KEY }}
        OS_DOMAIN_NAME: ${{ secrets.FE_DOMAIN_NAME }}
        OS_PROJECT_NAME: ${{ secrets.FE_PROJECT_NAME }}
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'plan'
        args: '-destroy -out=./destroy-plan'
        
    - name: 'Terraform Apply Destroy'
      if: always()
      uses: hashicorp/terraform-github-actions@master
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
        OS_ACCESS_KEY: ${{ secrets.FE_ACCESS_KEY_ID }}
        OS_SECRET_KEY: ${{ secrets.FE_SECRET_ACCESS_KEY }}
        OS_DOMAIN_NAME: ${{ secrets.FE_DOMAIN_NAME }}
        OS_PROJECT_NAME: ${{ secrets.FE_PROJECT_NAME }}
      with:
        tf_actions_version: latest
        tf_actions_subcommand: 'apply'  
        args: './destroy-plan'
